name: SonarCloud analysis
on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, reopened]
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    container: ghcr.io/nextcloud/continuous-integration-client:client-5.15-4
    env:
      SONAR_SERVER_URL: "https://sonarcloud.io"
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      - name: Restore cache
        uses: actions/cache@v2
        with:
          path: /cache
          key: ${{ runner.os }}

      - name: Run build-wrapper
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER=gcc-10 -DCMAKE_CXX_COMPILER=g++-10 -DBUILD_UPDATER=ON -DBUILD_TESTING=1 -DBUILD_COVERAGE=ON
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} make -j 2
      - name: Run tests
        run: |
          cd build
          useradd -m -s /bin/bash test
          chown -R test:test .
          su -c 'xvfb-run ctest --output-on-failure --output-junit testResult.xml' test
      - name: Generate coverage report
        run: |
          cd build
          su -c 'ctest -T Coverage' test
      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          cp sonar-project.properties build
          cd build
          sonar-scanner --define sonar.host.url="${{ env.SONAR_SERVER_URL }}" --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"
    
  build-on-windows:
    name: Build-on-windows
    runs-on: windows-2019
    env:
      SONAR_SERVER_URL: "https://sonarcloud.io"
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
      CRAFT_TARGET: windows-msvc2019_64-cl
      COBERTURA_COVERAGE_FILE: ${{ github.workspace }}\cobertura_coverage\coverage.xml
      CRAFT_MASTER_LOCATION: ${{ github.workspace }}\CraftMaster
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      - name: Install Craft Master With Nextcloud Client Deps
        shell: pwsh
        run: |
          & cmd /C "git clone -q --depth=1 https://invent.kde.org/packaging/craftmaster.git ${{ env.CRAFT_MASTER_LOCATION }} 2>&1"
          
          function craft() {
              python "${{ env.CRAFT_MASTER_LOCATION }}\CraftMaster.py" --verbose --config "${{ github.workspace }}\appveyor.ini" --variables "APPVEYOR_BUILD_FOLDER=${{ github.workspace }}" --target ${{ env.CRAFT_TARGET }} -c $args
          }
          
          craft --add-blueprint-repository [git]https://github.com/nextcloud/desktop-client-blueprints.git
          craft craft
          craft --install-deps nextcloud-client
          craft nsis
          
      - name: Cache Install OpenCppCoverage
        id: cache-install-opencppcoverage
        uses: actions/cache@v3
        with:
          path: C:\Program Files\OpenCppCoverage
          key: ${{ runner.os }}-cache-install-opencppcoverage
          
      - name: Install OpenCppCoverage
        if: steps.cache-install-opencppcoverage.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          choco install opencppcoverage
          
      - name: Setup PATH
        shell: pwsh
        run: |
          echo "C:\Program Files\OpenCppCoverage" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "${{ github.workspace }}\${{ env.CRAFT_TARGET }}\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
      - name: Compile
        shell: pwsh
        run: |
          function craft() {
              python "${{ env.CRAFT_MASTER_LOCATION }}\CraftMaster.py" --verbose --config "${{ github.workspace }}\appveyor.ini" --variables "APPVEYOR_BUILD_FOLDER=${{ github.workspace }}" --target ${{ env.CRAFT_TARGET }} -c $args
          }
          echo "GetChildItem C:\windows-msvc2019_64-cl"
          
          craft --search nextcloud-client
          
          craft --src-dir ${{ github.workspace }} nextcloud-client
          
      - name: Run tests
        shell: pwsh
        run: |
          function runTests() {
              cmd /C "echo %PATH%"
              
              $binFolder = "${{ github.workspace }}\${{ env.CRAFT_TARGET }}\build\nextcloud-client\work\build\bin"
              cd $binFolder
        
              echo "sources at: ${{ github.workspace }}"
        
              $testFiles = Get-ChildItem . -Recurse | where {$_.name -clike "*Test.exe"} | select -expand name
        
              $totalTests = $testFiles.count
        
              $counter = 0
        
              $previousCov = "";
        
              foreach ($testFile in $testFiles) {
                  $counter += 1
                  if($counter -ne $totalTests) {
                      & OpenCppCoverage.exe --sources ${{ github.workspace }} --modules $binFolder\*.dll* --export_type binary:$testFile.cov $testFile
                      $previousCov += "--input_coverage=$testFile.cov "
                  } else {
                      $runLastTestAndMergeReport = "OpenCppCoverage.exe --sources ${{ github.workspace }} --modules $binFolder\*.dll* --export_type cobertura:${{ env.COBERTURA_COVERAGE_FILE }} "
                      $runLastTestAndMergeReport += $previousCov
                      $runLastTestAndMergeReport += $testFile
                      Invoke-Expression $runLastTestAndMergeReport
                  }
              }
          }
          
          runTests
          
      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          cp sonar-project.properties build
          sonar-scanner --define sonar.host.url="${{ env.SONAR_SERVER_URL }}" --define sonar.cxx.cobertura.reportPaths="${{ env.COBERTURA_COVERAGE_FILE }}"
