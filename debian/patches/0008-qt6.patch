diff --git a/CMakeLists.txt b/CMakeLists.txt
index 3c1d91f80..6e87ee651 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -24,7 +24,7 @@ set(BIN_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin")
 include(${CMAKE_SOURCE_DIR}/NEXTCLOUD.cmake)
 
 set(QT_VERSION_MAJOR "6")
-set(REQUIRED_QT_VERSION "6.7.0")
+set(REQUIRED_QT_VERSION "6.4.2")
 
 # CfAPI Shell Extensions
 set( CFAPI_SHELL_EXTENSIONS_LIB_NAME CfApiShellExtensions )
diff --git a/shell_integration/libcloudproviders/CMakeLists.txt b/shell_integration/libcloudproviders/CMakeLists.txt
index 02035d863..ba2438305 100644
--- a/shell_integration/libcloudproviders/CMakeLists.txt
+++ b/shell_integration/libcloudproviders/CMakeLists.txt
@@ -26,6 +26,7 @@ endmacro(libcloudproviders_add_config _sources)
 
 
 if (Qt6_FOUND)
+    set(QT_NO_CREATE_VERSIONLESS_TARGETS TRUE)
     find_package(Qt6 COMPONENTS COMPONENTS DBus)
 else()
     set(REQUIRED_QT_VERSION "5.15.0")
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index fe9d4d9af..7389f20c7 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -1,6 +1,6 @@
 include(ECMEnableSanitizers)
 
-set(REQUIRED_QT_VERSION "6.5.0")
+set(REQUIRED_QT_VERSION "6.4.2")
 
 find_package(Qt${QT_MAJOR_VERSION}Core ${REQUIRED_QT_VERSION} CONFIG QUIET)
 set_package_properties(Qt${QT_MAJOR_VERSION}Core PROPERTIES
diff --git a/src/gui/application.cpp b/src/gui/application.cpp
index f6df24546..1f5882756 100644
--- a/src/gui/application.cpp
+++ b/src/gui/application.cpp
@@ -977,7 +977,7 @@ QString substLang(const QString &lang)
 void Application::setupTranslations()
 {
     const auto enforcedLocale = Theme::instance()->enforcedLocale();
-    const auto lang = substLang(!enforcedLocale.isEmpty() ? enforcedLocale : QLocale::system().uiLanguages(QLocale::TagSeparator::Underscore).first());
+    const auto lang = substLang(!enforcedLocale.isEmpty() ? enforcedLocale : QLocale::system().name());
 
     auto *translator = new QTranslator(this);
     auto *qtTranslator = new QTranslator(this);
diff --git a/src/libsync/theme.cpp b/src/libsync/theme.cpp
index 7e717bf05..4265b9e3b 100644
--- a/src/libsync/theme.cpp
+++ b/src/libsync/theme.cpp
@@ -25,8 +25,6 @@
 #include <QStyle>
 #include <QApplication>
 #endif
-#include <QGuiApplication>
-#include <QStyleHints>
 #include <QSslSocket>
 #include <QSvgRenderer>
 #include <QPainter>
@@ -968,7 +966,7 @@ QColor Theme::defaultColor()
 void Theme::connectToPaletteSignal() const
 {
     if (const auto ptr = qobject_cast<QGuiApplication*>(qApp)) {
-        connect(ptr->styleHints(), &QStyleHints::colorSchemeChanged, this, &Theme::darkModeChanged, Qt::UniqueConnection);
+        connect(ptr, &QGuiApplication::paletteChanged, this, &Theme::darkModeChanged);
     }
 }
 
@@ -1011,29 +1009,18 @@ QVariantMap Theme::systemPalette() const
 bool Theme::darkMode() const
 {
     connectToPaletteSignal();
-    const auto isDarkFromStyle = [] {
-        switch (qGuiApp->styleHints()->colorScheme())
-        {
-        case Qt::ColorScheme::Dark:
-            return true;
-        case Qt::ColorScheme::Light:
-            return false;
-        case Qt::ColorScheme::Unknown:
-            return Theme::isDarkColor(QGuiApplication::palette().window().color());
-        }
-
-        return false;
-    };
-
-#ifdef Q_OS_WIN
-    static const auto darkModeSubkey = QStringLiteral("Software\\Microsoft\\Windows\\CurrentVersion\\Themes\\Personalize");
-    if (!isWindows11OrGreater() &&
-        Utility::registryKeyExists(HKEY_CURRENT_USER, darkModeSubkey) &&
+// Windows: Check registry for dark mode
+#if defined(Q_OS_WIN)
+    const auto darkModeSubkey = QStringLiteral("Software\\Microsoft\\Windows\\CurrentVersion\\Themes\\Personalize");
+    if (Utility::registryKeyExists(HKEY_CURRENT_USER, darkModeSubkey) &&
         !Utility::registryGetKeyValue(HKEY_CURRENT_USER, darkModeSubkey, QStringLiteral("AppsUseLightTheme")).toBool()) {
         return true;
     }
+
+    return false;
+#else
+    return Theme::isDarkColor(QGuiApplication::palette().window().color());
 #endif
-    return isDarkFromStyle();
 }
 
 bool Theme::displayLegacyImportDialog() const
